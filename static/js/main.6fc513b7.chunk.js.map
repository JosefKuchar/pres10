{"version":3,"sources":["Num.tsx","Tester.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Num","state","value","e","this","setState","target","key","props","handle","parseInt","hidden","Input","onChange","updateInput","bind","onKeyPress","handleSubmit","autoFocus","style","width","fontSize","fontWeight","Typography","variant","display","React","Component","getRandom","min","max","Math","floor","random","Tester","plus","unknown","numbers","error","c","b","a","right","generateNumbers","_","val","color","Slider","step","valueLabelDisplay","defaultValue","changeMax","paddingTop","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6fc513b7.chunk.js","sourcesContent":["import React from 'react';\nimport Input from '@material-ui/core/Input';\nimport Typography from '@material-ui/core/Typography'\n\ninterface INumProps {\n  value: number;\n  hidden: boolean;\n  handle: (right: boolean) => void;\n}\n\ninterface INumState {\n  value: string;\n}\n\nexport default class Num extends React.Component<INumProps, INumState> {\n  state = {\n    value: ''\n  }\n\n  updateInput(e: any) {\n    this.setState({\n      ...this.state,\n      value: e.target.value,\n    })\n  }\n\n  handleSubmit(e: any) {\n    if (e.key === 'Enter') {\n      this.props.handle(parseInt(this.state.value) === this.props.value);\n      this.setState({\n        ...this.state,\n        value: '',\n      })\n    }\n  }\n\n  render() {\n    if (this.props.hidden) {\n      return <Input onChange={this.updateInput.bind(this)} value={this.state.value} onKeyPress={this.handleSubmit.bind(this)} autoFocus style={{ width: 50, fontSize: '1.25rem', fontWeight: 500}}/>\n    } else {\n      return <Typography variant=\"h6\" style={{ display: 'inline'}}>{this.props.value}</Typography>;\n    }\n  }\n}\n","import React from 'react';\nimport Num from './Num';\nimport Typography from '@material-ui/core/Typography'\nimport Slider from '@material-ui/core/Slider'\n\ninterface ITesterState {\n  max: number;\n  plus: boolean;\n  unknown: number;\n  numbers: number[];\n  error: boolean;\n}\n\nfunction getRandom(min: number, max: number) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\n\nexport default class Tester extends React.Component<{}, ITesterState> {\n  state = {\n    max: 13,\n    plus: true,\n    unknown: 0,\n    numbers: [0, 0, 0],\n    error: false\n  }\n\n  generateNumbers() {\n    let c = getRandom(11, this.state.max);\n    let b = getRandom(c - 9, 9);\n    let a = c - b;\n    let plus = Math.random() > 0.5\n    this.setState({\n      ...this.state,\n      plus,\n      unknown: Math.floor(Math.random() * 3),\n      numbers: plus ? [a, b, c] : [c, a, b],\n      error: false,\n    })\n  }\n\n  handle(right: boolean) {\n    if (right) {\n      this.generateNumbers();\n    } else {\n      this.setState({\n        ...this.state,\n        error: true,\n      })\n    }\n  }\n\n  changeMax(_: any, val: any) {\n    if (val !== this.state.max) {\n      this.setState({\n        ...this.state,\n        max: val\n      }, () => this.generateNumbers())\n    }\n  }\n\n  render() {\n    return <div>\n      <Typography variant=\"h5\" style={{ color: 'red' }}>{this.state.error ? 'Chyba !' : '\\u00a0'}</Typography>\n      <Num value={this.state.numbers[0]} hidden={this.state.unknown === 0} handle={this.handle.bind(this)} />\n      <Typography variant=\"h6\" style={{ display: 'inline' }}>{this.state.plus ? ' + ' : ' - '}</Typography>\n      <Num value={this.state.numbers[1]} hidden={this.state.unknown === 1} handle={this.handle.bind(this)} />\n      <Typography variant=\"h6\" style={{ display: 'inline' }}> = </Typography>\n      <Num value={this.state.numbers[2]} hidden={this.state.unknown === 2} handle={this.handle.bind(this)} />\n      <br></br>\n      <Slider step={1} min={11} max={18} valueLabelDisplay=\"auto\" defaultValue={13} onChange={this.changeMax.bind(this)} style={{ width: 200, paddingTop: 100}}></Slider>\n    </div>\n  }\n\n  componentDidMount() {\n    this.generateNumbers()\n  }\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Tester from './Tester'\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Tester></Tester>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}